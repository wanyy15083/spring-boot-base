<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	    http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/rabbit
        http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <context:property-placeholder ignore-resource-not-found="true" ignore-unresolvable="false"
                                  location="classpath*:properties/ds.properties,classpath*:properties/rabbit.properties,classpath*:properties/dubbo.properties,
        classpath*:properties/redis.properties,file:/data/config/zzexample/prod.properties"
                                  system-properties-mode="ENVIRONMENT"/>

    <rabbit:connection-factory id="rabbitConnectionFactory" host="${rabbit.host}" port="${rabbit.port}" 
                               username="${rabbit.username}" password="${rabbit.password}" requested-heartbeat="30"
                               virtual-host="${rabbit.vhost}" channel-cache-size="50"/>

    <rabbit:admin id="rabbitAdmin" connection-factory="rabbitConnectionFactory"/>

    <bean id="rabbitListenerContainerFactory"
          class="org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory">
        <property name="connectionFactory" ref="rabbitConnectionFactory"/>
        <property name="concurrentConsumers" value="2"/>
        <property name="maxConcurrentConsumers" value="10"/>
    </bean>

    <!-- queue declare -->
    <rabbit:queue durable="true" auto-delete="false" exclusive="false" name="${rabbit.queue.statuschange}"/>
    <rabbit:queue durable="true" auto-delete="false" exclusive="false" name="${rabbit.queue.dead}"/>
    <rabbit:queue durable="true" auto-delete="false" exclusive="false" name="${rabbit.queue.sendmessage}">
        <!--<rabbit:queue-arguments>-->
            <!--<entry key="x-message-ttl" value="10000" value-type="java.lang.Long"/>-->
            <!--<entry key="x-ha-policy" value="all"/>-->
            <!--<entry key="x-dead-letter-exchange" value="${rabbit.exchange.ex_test_dead}"/>-->
        <!--</rabbit:queue-arguments>-->
    </rabbit:queue>

    <!-- bind queue to exchange -->
    <rabbit:direct-exchange name="${rabbit.exchange.ex_test}" auto-delete="false" durable="true">
        <rabbit:bindings>
            <rabbit:binding queue="${rabbit.queue.statuschange}" key="${rabbit.routing.key.status}"></rabbit:binding>
            <rabbit:binding queue="${rabbit.queue.sendmessage}" key="${rabbit.routing.key.message}"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <rabbit:direct-exchange name="${rabbit.exchange.ex_test_dead}" auto-delete="false" durable="true">
        <rabbit:bindings>
            <rabbit:binding queue="${rabbit.queue.dead}" key="${rabbit.routing.key.dead}"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <rabbit:template id="rabbitTemplate" connection-factory="rabbitConnectionFactory"
                     retry-template="retryTemplate" reply-timeout="60000" mandatory="true" confirm-callback="" return-callback=""/>

    <bean id="retryTemplate" class="org.springframework.retry.support.RetryTemplate">
        <property name="backOffPolicy">
            <bean class="org.springframework.retry.backoff.ExponentialBackOffPolicy">
                <property name="initialInterval" value="500"/>
                <property name="multiplier" value="10.0"/>
                <property name="maxInterval" value="10000"/>
            </bean>
        </property>
    </bean>

    <!-- queue listener -->
    <!--<rabbit:listener-container>-->
        <!--<rabbit:listener queues="${rabbit.queue.sendmessage}" ref="messageConsumer"/>-->
    <!--</rabbit:listener-container>-->

    <!--<bean id="messageConsumer" class="com.base.listener.MessageConsumer"/>-->
</beans>